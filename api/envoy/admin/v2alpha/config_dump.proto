syntax = "proto3";

package envoy.admin.v2alpha;

import "envoy/api/v2/cds.proto";
import "envoy/api/v2/lds.proto";
import "envoy/api/v2/rds.proto";
import "envoy/config/bootstrap/v2/bootstrap.proto";

import "google/protobuf/any.proto";

import "gogoproto/gogo.proto";

// [#protodoc-title: ConfigDump]

// The /config_dump admin endpoint uses this wrapper message to maintain and serve arbitrary
// configuration information from any component in Envoy.
// TODO(jsedgwick) In the future, we may want to formalize this further with an RPC for config_dump,
// and perhaps even with an RPC per config type. That strategy across all endpoints will allow for
// more flexibility w.r.t. protocol, serialization, parameters, etc.
message ConfigDump {
  // This map is serialized and dumped in its entirety at the /config_dump endpoint.
  //
  // Keys should be a short descriptor of the config object they map to. For example, Envoy's HTTP
  // routing subsystem might use "routes" as the key for its config, for which it uses the message
  // RouteConfigDump as defined below. In the future, the key will also be used to filter the output
  // of the /config_dump endpoint.
  map<string, google.protobuf.Any> configs = 1 [(gogoproto.nullable) = false];
}

// fixfix
message BootstrapConfigDump {
  envoy.config.bootstrap.v2.Bootstrap bootstrap = 1 [(gogoproto.nullable) = false];
}

// fixfix
message ListenersConfigDump {
  // fixfix
  string version_info = 1;

  message DynamicListener {
    string version_info = 1;
    envoy.api.v2.Listener listener = 2;
  }

  repeated envoy.api.v2.Listener static_listeners = 2 [(gogoproto.nullable) = false];
  repeated DynamicListener dynamic_active_listeners = 3 [(gogoproto.nullable) = false];
  repeated DynamicListener dynamic_warming_listeners = 4 [(gogoproto.nullable) = false];
  repeated DynamicListener dynamic_draining_listeners = 5 [(gogoproto.nullable) = false];
}

// fixfix
message ClustersConfigDump {
  // fixfix
  string version_info = 1;

  message DynamicCluster {
    string version_info = 1;
    envoy.api.v2.Cluster cluster = 2;
  }

  repeated envoy.api.v2.Cluster static_clusters = 2 [(gogoproto.nullable) = false];
  repeated DynamicCluster dynamic_active_clusters = 3 [(gogoproto.nullable) = false];
  repeated DynamicCluster dynamic_warming_clusters = 4 [(gogoproto.nullable) = false];
}

// Envoy's RDS implementation fills this message with all currently loaded routes, as described by
// their RouteConnfiguration objects. Static routes configured in the bootstrap configuration are
// separated from those configured dynamically via RDS. This message is available at the
// /config_dump admin endpoint.
message RoutesConfigDump {
  // fixfix
  string version_info = 1;

  message DynamicRouteConfig {
    string version_info = 1;
    envoy.api.v2.RouteConfiguration route_config = 2;
  }

  repeated envoy.api.v2.RouteConfiguration static_route_configs = 2 [(gogoproto.nullable) = false];
  repeated DynamicRouteConfig dynamic_route_configs = 3 [(gogoproto.nullable) = false];
}
